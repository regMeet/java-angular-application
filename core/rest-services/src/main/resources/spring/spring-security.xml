<?xml version="1.0" encoding="UTF-8"?>
<bean:beans
	xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns="http://www.springframework.org/schema/security"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!--
	Applies to root appContext beans only, for MVC Controllers is this declaration repeated in MVC config.
	Actually, we currently don't need this as we have on annotation outside of MVC.
	There is more here that can go wrong. If you use interface-based proxy (our demo uses CGLib), you may
	need to add proxy-target-class="true" as well. Book "Spring Security 3.1", Chapter 10, Fine-grained
	Access Control, from header "Method security on Spring MVC controllers" on discusses these topics.
	-->
<!-- 	<global-method-security secured-annotations="enabled"/> -->
    <!-- Important for @Secured annotations to work. Here we enable all three of them - @Secured, @PreAuthorize and @RolesAllowed. You may choose 
    what you use. Check MainRestController for examples. -->
<!--     <global-method-security secured-annotations="enabled" pre-post-annotations="enabled" jsr250-annotations="enabled"/> -->

    <http realm="Static" pattern="/*" security="none" />

	<http realm="Protected API"
		use-expressions="true"
		create-session="stateless"
		entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager">

        <csrf disabled="true"/>

		<!--
		This is not easily possible, because it causes:
		DEBUG o.s.s.w.a.ExceptionTranslationFilter - Authentication exception occurred; redirecting to authentication entry point
		org.springframework.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext
		-->
		<!--<anonymous enabled="false"/>-->
		<custom-filter ref="tokenAuthenticationFilter" position="FORM_LOGIN_FILTER"/>

        <intercept-url pattern="/auth/*" access="permitAll"/>
        <intercept-url pattern="/api/users/ping/*" access="permitAll"/>
<!--         <intercept-url pattern="/api/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/> -->
		<intercept-url pattern="/api/**" access="isFullyAuthenticated()"/>
		<intercept-url pattern="/*" access="permitAll"/>
	</http>

	<authentication-manager id="authenticationManager">
		<authentication-provider user-service-ref="securityUserService">
			<!--
			Default password encoder is PlaintextPasswordEncoder, which fits with our hardcoded users.
			Obviously not a good choice otherwise.
			-->
		</authentication-provider>
	</authentication-manager>

<!--     <bean:bean id="unauthorizedEntryPoint" class="com.company.project.security.UnauthorizedEntryPoint" /> -->

<!--     <bean:bean id="securityUserService" class="com.company.project.security.SecurityUserService" /> -->

<!--     <bean:bean id="tokenManager" class="com.company.project.security.TokenManagerImpl" /> -->

<!--     <bean:bean id="authenticationService" class="com.company.project.security.AuthenticationServiceImpl" -->
<!--         c:authenticationManager-ref="authenticationManager" c:tokenManager-ref="tokenManager" /> -->

<!--     <bean:bean id="tokenAuthenticationFilter" class="com.company.project.security.filter.TokenAuthenticationFilter" -->
<!--         c:authenticationService-ref="authenticationService" /> -->
</bean:beans>
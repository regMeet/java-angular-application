package com.company.project.persistence.entities;

// Generated 19/04/2015 17:56:57 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.DynamicUpdate;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * User generated by hbm2java
 */
@Data
@EqualsAndHashCode(callSuper = false)
// only updates what it's being updated
@DynamicUpdate
@Entity
@Table(name = "_user")
@NamedQueries({ @NamedQuery(name = User.FIND_ALL, query = "SELECT u FROM User u"),
        @NamedQuery(name = User.FIND_BY_USERNAME, query = "SELECT u FROM User u WHERE u.username = :username"),
        @NamedQuery(name = User.FIND_BY_EMAIL, query = "SELECT u FROM User u WHERE u.email = :email"),
        @NamedQuery(name = User.FIND_BY_FACEBOOK, query = "SELECT u FROM User u WHERE u.facebook = :facebook"),
        @NamedQuery(name = User.FIND_BY_GOOGLE, query = "SELECT u FROM User u WHERE u.google = :google"), })
public class User implements Serializable {
    private static final long serialVersionUID = 164233161212022125L;

    public static final String FIND_ALL = "User.findAll";
    public static final String FIND_BY_USERNAME = "User.findByUsername";
    public static final String FIND_BY_EMAIL = "User.findByEmail";
    public static final String FIND_BY_FACEBOOK = "User.findByFacebook";
    public static final String FIND_BY_GOOGLE = "User.findByGoogle";
    public static final String FIND_BY = "User.findBy%s";

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "idUser")
    private Long idUser;

    @Column(name = "firstname")
    private String firstname;

    @Column(name = "lastname")
    private String lastname;

    @Column(name = "email")
    private String email;

    @Column(name = "facebook")
    private String facebook;

    @Column(name = "google")
    private String google;

    @Column(name = "role")
    private String role;

    @Column(name = "username")
    private String username;

    @Column(name = "password")
    private String password;

    @Column(name = "telephone")
    private String telephone;

    @Column(name = "mobile")
    private String mobile;

    @Column(name = "last_logout")
    private Long lastLogout;

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (idUser != null ? idUser.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        if (object == null)
            return false;

        if (!(object instanceof User)) {
            return false;
        }
        User other = (User) object;
        if ((this.idUser == null && other.idUser != null) || (this.idUser != null && !this.idUser.equals(other.idUser))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "User [idUser=" + idUser + ", firstname=" + firstname + ", lastname=" + lastname + ", email=" + email + ", facebook=" + facebook + ", google="
                + google + ", role=" + role + ", username=" + username + ", password=" + password + ", telephone=" + telephone + ", mobile=" + mobile + "]";
    }

    public enum Provider {
        FACEBOOK("facebook"), GOOGLE("google"), LINKEDIN("linkedin"), GITHUB("github"), FOURSQUARE("foursquare"), TWITTER("twitter");

        String name;

        Provider(final String name) {
            this.name = name;
        }

        public String getName() {
            return this.name;
        }

        public String capitalize() {
            return StringUtils.capitalize(this.name);
        }
    }

    public void setProviderId(final Provider provider, final String value) {
        switch (provider) {
        case FACEBOOK:
            this.facebook = value;
            break;
        case GOOGLE:
            this.google = value;
            break;
        default:
            throw new IllegalArgumentException();
        }
    }

    public boolean allowToUnlinkAMethodAccount() {
        boolean emailMethod = this.getEmail() != null && this.getPassword() != null;
        boolean googleMethod = this.getGoogle() != null;
        boolean facebookMethod = this.getFacebook() != null;

        return emailMethod || googleMethod || facebookMethod;
    }

}
